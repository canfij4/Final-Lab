// ENGR-2350 Lab 4 Template S22

#include "engr2350_msp432.h"
#include <math.h>

void GPIOInit();
void TimerInit();
void Encoder_ISR();
void T1_100ms_ISR();
void I2CInit();
void I2C_writeData(uint32_t moduleInstance, uint8_t PeriphAddress,
                   uint8_t StartReg, uint8_t *data, uint8_t len);
void I2C_readData(uint32_t moduleInstance, uint8_t PeriphAddress,
                  uint8_t StartReg, uint8_t *data, uint8_t len);
void turn_car(uint8_t turn);
uint16_t readCompass();
uint16_t readRanger();
//Timer Variables
Timer_A_UpModeConfig TA0cfg;
Timer_A_UpModeConfig TA1cfg;
Timer_A_ContinuousModeConfig TA3cfg;
Timer_A_CompareModeConfig TA0_ccr3;
Timer_A_CompareModeConfig TA0_ccr4;
Timer_A_CaptureModeConfig TA3_ccr0;
Timer_A_CaptureModeConfig TA3_ccr1;

eUSCI_I2C_MasterConfig control;
uint8_t array_c[3];
uint8_t array_u[3];
uint8_t array_com[1];
uint16_t heading; //saves measured heading values
uint16_t range;
int16_t attitude_diff;
uint8_t global_straight_flag = 0;
uint16_t oldlight = 0;
uint16_t light = 1;

//ADC Variables
uint8_t timer_flag = 0;

//control specification variables
int16_t pwm_max = 720; // Maximum limit on PWM output
//set compare value to this is great than it
int16_t pwm_min = 80; // Minimum limit on PWM output
//set compare value to this if less than it
int16_t pwm_set_l, pwm_set_r; // Calculated PWM output (control output)
float ratio_t = 1;
float turn_t, voltage_t;
uint8_t state = 0; //control turn = 0, straight = 1
int32_t min_speed = 80; //10% set desired speed to 0 if less than
int32_t max_speed = 400; //50% set desired speed to this if greater than

//distance variables
int32_t speed_d_l = 150;
int32_t speed_d_r = 150; //desired speed for LM and RM

int32_t dist_tr;
int32_t target_dist = 40;
int16_t target_attitude_placeholder = 200; //random heading
uint8_t turn;

float kp = -0.05; // proportional control gain
int64_t error_sum_l = 0; // Integral control error summation
int64_t error_sum_r = 0;
float ki = 0.005; // integral control gain

int32_t current_error_l = 0; //current speed error
int32_t current_error_r = 0; //current speed error

//corrected speeds
int32_t speed_c_l, speed_c_r;

// Encoder total events
uint32_t enc_total_L = 0;
uint32_t enc_total_R = 0;
// Speed measurement variables
int32_t Tach_L_count, Tach_L, Tach_L_sum, Tach_L_sum_count, Tach_L_avg; // Left wheel
int32_t Tach_R_count, Tach_R, Tach_R_sum, Tach_R_sum_count, Tach_R_avg; // Right wheel

uint8_t run_control = 0; // Flag to denote that 100ms has passed and control should be run.
uint8_t ten = 0; //flag for 10 s

int main(void)
{
    SysInit();
    GPIOInit();
    TimerInit();
    I2CInit();

    __delay_cycles(24e6); //delay of 1 sec
    //run_control = 0; //start 100 ms timer
    GPIO_setOutputHighOnPin(GPIO_PORT_P3, GPIO_PIN6 | GPIO_PIN7); //turn motors on

    while (1)
    {
        srand((time(0)));
        if (ten > 99)
        {
            target_attitude_placeholder = rand() % 3600; //generate a new random desired heading
            global_straight_flag = 0; //reset turn flag
            ten = 0; //reset counter
            printf("new heading: %u\r\n", target_attitude_placeholder);
            GPIO_setOutputHighOnPin(GPIO_PORT_P3, GPIO_PIN6 | GPIO_PIN7); //turn motors on
        }

        __delay_cycles(2.4e6); // Wait 1/10 of a second

        printf("Compass: %4u\tRanger: %4u\r\n", readCompass(), readRanger());
        if (run_control)
        {    // If 100 ms has passed
            run_control = 0;    // Reset the 100 ms flag

            //printf("heading: %4u\trange: %4u\r\n", heading, range);

            if (speed_d_l <= min_speed)
            {
                speed_d_l = 0; //Set desired speed to 0 if less than
            }
            else if (speed_d_l > max_speed)
            {
                speed_d_l = max_speed; //Set desired speed to this if greater than
            }
            //Right Wheel
            //printf("Initial_r: %f\r\n", voltage); //print intial desired speed
            //Ensure the desired speed follows the control specifications below.
            if (speed_d_r <= min_speed)
            {
                speed_d_r = 0; //Set desired speed to 0 if less than
            }
            else if (speed_d_r > max_speed)
            {
                speed_d_r = max_speed; //Set desired speed to this if greater than
            }
            speed_d_r = speed_d_l;

            //seek light source
            if (light < 95)
            {
                turn = 0;
                turn_car(turn);
                speed_d_l = 150;
                speed_d_r = 150; //desired speed for LM and RM
            }
            else if (light + 5 < oldlight)
            {
                turn_car(1);
                __delay_cycles(50e5); //delay of 1 sec
                turn = 2;
                turn_car(turn);
                __delay_cycles(60e6); //delay of 1 sec
            }

            //set heading at light source

            //drive for 3 seconds

            //Start Wheel Speed Control
            turn_car(turn);
            //Left Wheel
            //printf("New Desired_l:%u\t", speed_d_l); //print intial desired speed
            //follows lab pseudocode
            if (speed_d_l < min_speed)
            { //if desired wheel speed is less than minimum value
                speed_d_l = 0; //set desired speed to 0
                Timer_A_setCompareValue( TIMER_A0_BASE,
                TIMER_A_CAPTURECOMPARE_REGISTER_4,
                                        0); //set compare value to 0
            }
            else
            {
                int32_t speed_m_l = 1500000 / (Tach_L_avg); //encoder speed is the measurement speed
                //printf("Encoder_l: %u\r\n", Tach_L_avg); //print encoder  speed
                current_error_l = speed_d_l - speed_m_l * 8; //calculate the current speed error from the encoder and desired wheel speed
                error_sum_l += current_error_l; //add current speed error to an "error sum" variable

                speed_c_l = speed_d_l + kp * (current_error_l); //calculate the corrected speed using the discrete equation given

                pwm_set_l = speed_c_l; //convert the corrected speed (duty cycle) into a compare value
                //enforce minimum and maximum limits on the compare value
                if (pwm_set_l < pwm_min)
                {
                    pwm_set_l = pwm_min; //Set compare value to this if less than
                }
                if (pwm_set_l > pwm_max)
                {
                    pwm_set_l = pwm_max; //Set compare value to this if greater than
                }
                //printf("pwml: %d\tdesire: %d\tave enc over 6 ISRs: %d\t\r\n",pwm_set_l, speed_d_l, Tach_L_avg);

                Timer_A_setCompareValue( TIMER_A0_BASE,TIMER_A_CAPTURECOMPARE_REGISTER_4,pwm_set_l); //apply the compare value
            }

            //Right Wheel
            //printf("New Desired_r: %u\t", speed_d_r); //print intial desired speed
            if (speed_d_r < min_speed)
            { //if desired wheel speed is less than minimum value
                speed_d_r = 0; //set desired speed to 0
                Timer_A_setCompareValue( TIMER_A0_BASE,
                TIMER_A_CAPTURECOMPARE_REGISTER_3,
                                        0); //set compare value to 0
            }
            else
            {
                int32_t speed_m_r = 1500000 / Tach_R_avg; //encoder speed is the measurement speed
                //printf("Encoder_r: %u\r\n", Tach_R_avg); //print encoder  speed
                current_error_r = speed_d_r - speed_m_r * 8; //calculate the current speed error from the encoder and desired wheel speed
                error_sum_r += current_error_r; //add current speed error to an "error sum" variable

                speed_c_r = speed_d_r + kp * (current_error_r); //calculate the corrected speed using the discrete equation given

                pwm_set_r = speed_c_r; //convert the corrected speed (duty cycle) into a compare value
                //enforce minimum and maximum limits on the compare value

                if (pwm_set_r < pwm_min)
                {
                    pwm_set_r = pwm_min; //Set compare value to this if less than
                }
                if (pwm_set_r > pwm_max)
                {
                    pwm_set_r = pwm_max; //Set compare value to this if greater than
                }
                //printf("pwmr: %d\tdesire: %d\tave enc over 6 ISRs: %d\t\r\n",pwm_set_r, speed_d_r, Tach_R_avg);
                Timer_A_setCompareValue( TIMER_A0_BASE,
                TIMER_A_CAPTURECOMPARE_REGISTER_3,
                                        pwm_set_r); //apply the compare value

            }
        }
    }
}

void I2CInit()
{
    control.selectClockSource = EUSCI_B_I2C_CLOCKSOURCE_SMCLK; //indicates which clock should be used
    control.i2cClk = 24000000; //set frequency of clock source shoudl match the clock source
    control.dataRate = EUSCI_B_I2C_SET_DATA_RATE_100KBPS; //bit rate to 100kbit/s
    control.byteCounterThreshold = 0; //bytes per packet
    I2C_initMaster( EUSCI_B0_BASE, &control); //initialize eUSCI_B
    I2C_enableModule(EUSCI_B0_BASE);
}

void GPIOInit()
{
    GPIO_setAsOutputPin(GPIO_PORT_P5, GPIO_PIN4 | GPIO_PIN5); // Motor direction pins
    GPIO_setAsOutputPin(GPIO_PORT_P3, GPIO_PIN6 | GPIO_PIN7); // Motor enable pins
    // Motor PWM pins
    GPIO_setAsPeripheralModuleFunctionOutputPin(GPIO_PORT_P2,
    GPIO_PIN6 | GPIO_PIN7,
                                                GPIO_PRIMARY_MODULE_FUNCTION);
    // Motor Encoder pins
    GPIO_setAsPeripheralModuleFunctionInputPin(GPIO_PORT_P10,
    GPIO_PIN4 | GPIO_PIN5,
                                               GPIO_PRIMARY_MODULE_FUNCTION);

    GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN4 | GPIO_PIN5); // Motors set to forward
    GPIO_setOutputLowOnPin(GPIO_PORT_P3, GPIO_PIN6 | GPIO_PIN7); // Motors are OFF
    //compass and ranger
    GPIO_setAsPeripheralModuleFunctionOutputPin( GPIO_PORT_P1, GPIO_PIN6,
    GPIO_PRIMARY_MODULE_FUNCTION);
    GPIO_setAsPeripheralModuleFunctionOutputPin( GPIO_PORT_P1, GPIO_PIN7,
    GPIO_PRIMARY_MODULE_FUNCTION);

}

void TimerInit()
{
    // Configure PWM timer for 30 kHz
    TA0cfg.clockSource = TIMER_A_CLOCKSOURCE_SMCLK;
    TA0cfg.clockSourceDivider = TIMER_A_CLOCKSOURCE_DIVIDER_1;
    TA0cfg.timerPeriod = 800;
    Timer_A_configureUpMode(TIMER_A0_BASE, &TA0cfg);
    // Configure TA0.CCR3 for PWM output
    TA0_ccr3.compareRegister = TIMER_A_CAPTURECOMPARE_REGISTER_3;
    TA0_ccr3.compareOutputMode = TIMER_A_OUTPUTMODE_RESET_SET;
    TA0_ccr3.compareValue = 200;
    Timer_A_initCompare(TIMER_A0_BASE, &TA0_ccr3);
    // Configure TA0.CCR4 for PWM output
    TA0_ccr4.compareRegister = TIMER_A_CAPTURECOMPARE_REGISTER_4;
    TA0_ccr4.compareOutputMode = TIMER_A_OUTPUTMODE_RESET_SET;
    TA0_ccr4.compareValue = 200;
    Timer_A_initCompare(TIMER_A0_BASE, &TA0_ccr4);
    // Configure Encoder timer in continuous mode
    TA3cfg.clockSource = TIMER_A_CLOCKSOURCE_SMCLK;
    TA3cfg.clockSourceDivider = TIMER_A_CLOCKSOURCE_DIVIDER_1;
    TA3cfg.timerInterruptEnable_TAIE = TIMER_A_TAIE_INTERRUPT_ENABLE;
    Timer_A_configureContinuousMode(TIMER_A3_BASE, &TA3cfg);
    // Configure TA3.CCR0 for Encoder measurement
    TA3_ccr0.captureRegister = TIMER_A_CAPTURECOMPARE_REGISTER_0;
    TA3_ccr0.captureMode = TIMER_A_CAPTUREMODE_RISING_EDGE;
    TA3_ccr0.captureInputSelect = TIMER_A_CAPTURE_INPUTSELECT_CCIxA;
    TA3_ccr0.synchronizeCaptureSource = TIMER_A_CAPTURE_SYNCHRONOUS;
    TA3_ccr0.captureInterruptEnable = TIMER_A_CAPTURECOMPARE_INTERRUPT_ENABLE;
    Timer_A_initCapture(TIMER_A3_BASE, &TA3_ccr0);
    // Configure TA3.CCR1 for Encoder measurement
    TA3_ccr1.captureRegister = TIMER_A_CAPTURECOMPARE_REGISTER_1;
    TA3_ccr1.captureMode = TIMER_A_CAPTUREMODE_RISING_EDGE;
    TA3_ccr1.captureInputSelect = TIMER_A_CAPTURE_INPUTSELECT_CCIxA;
    TA3_ccr1.synchronizeCaptureSource = TIMER_A_CAPTURE_SYNCHRONOUS;
    TA3_ccr1.captureInterruptEnable = TIMER_A_CAPTURECOMPARE_INTERRUPT_ENABLE;
    Timer_A_initCapture(TIMER_A3_BASE, &TA3_ccr1);
    // Register the Encoder interrupt
    Timer_A_registerInterrupt(TIMER_A3_BASE, TIMER_A_CCR0_INTERRUPT,
                              Encoder_ISR);
    Timer_A_registerInterrupt(TIMER_A3_BASE,
    TIMER_A_CCRX_AND_OVERFLOW_INTERRUPT,
                              Encoder_ISR);
    // Configure 10 Hz timer
    TA1cfg.clockSource = TIMER_A_CLOCKSOURCE_SMCLK;
    TA1cfg.clockSourceDivider = TIMER_A_CLOCKSOURCE_DIVIDER_64;
    TA1cfg.timerInterruptEnable_TAIE = TIMER_A_TAIE_INTERRUPT_ENABLE;
    TA1cfg.timerPeriod = 37500;
    Timer_A_configureUpMode(TIMER_A1_BASE, &TA1cfg);
    Timer_A_registerInterrupt(TIMER_A1_BASE,
    TIMER_A_CCRX_AND_OVERFLOW_INTERRUPT,
                              T1_100ms_ISR);
    // Start all the timers
    Timer_A_startCounter(TIMER_A0_BASE, TIMER_A_UP_MODE);
    Timer_A_startCounter(TIMER_A1_BASE, TIMER_A_UP_MODE);
    Timer_A_startCounter(TIMER_A3_BASE, TIMER_A_CONTINUOUS_MODE);

    //Timer_A_enableCaptureCompareInterrupt(TIMER_A0_BASE, TIMER_A_CAPTURECOMPARE_REGISTER_0); //do I need these?
    //Timer_A_enableCaptureCompareInterrupt(TIMER_A0_BASE, TIMER_A_CAPTURECOMPARE_REGISTER_1);
}

void Encoder_ISR()
{
    // If encoder timer has overflowed...
    if (Timer_A_getEnabledInterruptStatus(
    TIMER_A3_BASE) == TIMER_A_INTERRUPT_PENDING)
    {
        Timer_A_clearInterruptFlag(TIMER_A3_BASE);
        Tach_L_count += 65536;
        Tach_R_count += 65536;
        // Otherwise if the Left Encoder triggered...
    }
    if (Timer_A_getCaptureCompareEnabledInterruptStatus(
            TIMER_A3_BASE,
            TIMER_A_CAPTURECOMPARE_REGISTER_1)&TIMER_A_CAPTURECOMPARE_INTERRUPT_FLAG)
    {
        Timer_A_clearCaptureCompareInterrupt(TIMER_A3_BASE,
        TIMER_A_CAPTURECOMPARE_REGISTER_1);
        enc_total_L++; // Increment the total number of encoder events for the left encoder
        // Calculate and track the encoder count values
        Tach_L = Tach_L_count
                + Timer_A_getCaptureCompareCount(
                        TIMER_A3_BASE, TIMER_A_CAPTURECOMPARE_REGISTER_1);
        Tach_L_count = -Timer_A_getCaptureCompareCount(
                TIMER_A3_BASE, TIMER_A_CAPTURECOMPARE_REGISTER_1);
        // Sum values for averaging
        Tach_L_sum_count++;
        Tach_L_sum += Tach_L;
        // If 6 values have been received, average them.
        if (Tach_L_sum_count == 6)
        {
            Tach_L_avg = Tach_L_sum / 6;
            Tach_L_sum_count = 0;
            Tach_L_sum = 0;
        }
        // Otherwise if the Right Encoder triggered...
    }
    if (Timer_A_getCaptureCompareEnabledInterruptStatus(
            TIMER_A3_BASE,
            TIMER_A_CAPTURECOMPARE_REGISTER_0)&TIMER_A_CAPTURECOMPARE_INTERRUPT_FLAG)
    {
        Timer_A_clearCaptureCompareInterrupt(TIMER_A3_BASE,
        TIMER_A_CAPTURECOMPARE_REGISTER_0);
        enc_total_R++;
        Tach_R = Tach_R_count
                + Timer_A_getCaptureCompareCount(
                        TIMER_A3_BASE, TIMER_A_CAPTURECOMPARE_REGISTER_0);
        Tach_R_count = -Timer_A_getCaptureCompareCount(
                TIMER_A3_BASE, TIMER_A_CAPTURECOMPARE_REGISTER_0);
        Tach_R_sum_count++;
        Tach_R_sum += Tach_R;
        if (Tach_R_sum_count == 6)
        {
            Tach_R_avg = Tach_R_sum / 6;
            Tach_R_sum_count = 0;
            Tach_R_sum = 0;

        }
    }
}

void T1_100ms_ISR()
{
    Timer_A_clearInterruptFlag(TIMER_A1_BASE);
    run_control = 1;
    ten += 1; //increment 10s counter
}
void I2C_writeData(uint32_t moduleInstance, uint8_t PeriphAddress,
                   uint8_t StartReg, uint8_t *data, uint8_t len)
{
    I2C_setSlaveAddress(moduleInstance, PeriphAddress); // Set the peripheral address
    I2C_setMode(moduleInstance, EUSCI_B_I2C_TRANSMIT_MODE); // Indicate a write operation
    I2C_masterSendMultiByteStart(moduleInstance, StartReg); // Start the communication.
    // This function does three things. It sends the START signal,
    // sends the address, and then sends the start register.

    // This code loops through all of the bytes to send.
    uint8_t ctr;
    for (ctr = 0; ctr < len; ctr++)
    {
        I2C_masterSendMultiByteNext(moduleInstance, data[ctr]);
    }
    // Once all bytes are sent, the I2C transaction is stopped by sending the STOP signal
    I2C_masterSendMultiByteStop(moduleInstance);

    __delay_cycles(200); // A short delay to avoid starting another I2C transaction too quickly
}

void I2C_readData(uint32_t moduleInstance, uint8_t PeriphAddress,
                  uint8_t StartReg, uint8_t *data, uint8_t len)
{
    // First write the start register to the peripheral device. This can be
    // done by using the I2C_writeData function with a length of 0.
    I2C_writeData(moduleInstance, PeriphAddress, StartReg, 0, 0);

    Interrupt_disableMaster(); //  Disable all interrupts to prevent timing issues

    // Then do read transaction...
    I2C_setSlaveAddress(moduleInstance, PeriphAddress); // Set the peripheral address
    I2C_setMode(moduleInstance, EUSCI_B_I2C_RECEIVE_MODE); // Indicate a read operation
    I2C_masterReceiveStart(moduleInstance); // Start the communication. This function
    // doe two things: It first sends the START signal and
    // then sends the peripheral address. Once started, the eUSCI
    // will automatically fetch bytes from the peripheral until
    // a STOP signal is requested to be sent.

    // This code loops through 1 less than all bytes to receive
    uint8_t ctr;
    for (ctr = 0; ctr < (len - 1); ctr++)
    {
        while (!(UCB0IFG & UCRXIFG0))
            ; // Wait for a data byte to become available
        data[ctr] = I2C_masterReceiveMultiByteNext(moduleInstance); // read and store received byte
    }
    // Prior to receiving the final byte, request the STOP signal such that the
    // communication will halt after the byte is received.
    data[ctr] = I2C_masterReceiveMultiByteFinish(moduleInstance); // send STOP, read and store received byte

    Interrupt_enableMaster(); // Re-enable interrupts

    __delay_cycles(200); // A short delay to avoid starting another I2C transaction too quickly
}

uint16_t readCompass()
{
    //ensure min 2-element uint8_t array exists
    I2C_readData(EUSCI_B0_BASE, 0x60, 2, array_c, 2); //fetch registers 2 and 3 at the same time
    heading = (array_c[0] << 8) + array_c[1]; //combine the received bytes
    return heading;
}
uint16_t readRanger()
{
    I2C_readData(EUSCI_B0_BASE, 0x70, 1, array_u, 3);
    range = (array_u[1] << 8) + array_u[2];
    //printf("distance:%u", distance);
    array_com[0] = 0x51;
    I2C_writeData(EUSCI_B0_BASE, 0x70, 0, array_com, 1);
    oldlight = light;
    light = 0;
    light += array_u[0];
    return light;
}

void turn_car(uint8_t turn)
{
    if (turn == 0)
    {
        GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN5);
        GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN4);
    }
    if (turn == 1)
    {
        GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN4);
        GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN5);
    }
    if (turn == 2)
    {
        GPIO_setOutputLowOnPin(GPIO_PORT_P5, GPIO_PIN4 | GPIO_PIN5);
        speed_d_l = 150;
        speed_d_r = 150;
        if (global_straight_flag == 0)
        {
            Tach_R_sum = 0;
            Tach_L_sum = 0;
            __delay_cycles(24e5); //delay of 0.1 sec
        }

        global_straight_flag = 1;
    }
    if (turn == 3)
    {
        GPIO_setOutputHighOnPin(GPIO_PORT_P5, GPIO_PIN4 | GPIO_PIN5);
        speed_d_l = 200;
        speed_d_r = 200;
        if (global_straight_flag == 0)
        {
            Tach_R_sum = 0;
            Tach_L_sum = 0;
            __delay_cycles(24e5); //delay of 0.1 sec
        }

        global_straight_flag = 1;
    }
}
